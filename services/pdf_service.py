import io
import pdfkit
from datetime import datetime
from jinja2 import Environment, FileSystemLoader

# A simple, self-contained HTML template for the report
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>SmartBank Transaction Report</title>
    <style>
        body { font-family: sans-serif; margin: 0; padding: 0; background-color: #f4f4f4; }
        .container { width: 90%; margin: 20px auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
        .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 10px; margin-bottom: 20px; }
        .header h1 { color: #333; margin: 0; }
        .header p { color: #666; margin: 5px 0 0; }
        .transactions-table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        .transactions-table th, .transactions-table td { border: 1px solid #ddd; padding: 10px; text-align: left; font-size: 12px; }
        .transactions-table th { background-color: #f2f2f2; color: #333; text-transform: uppercase; }
        .transactions-table tr:nth-child(even) { background-color: #f9f9f9; }
        .transactions-table tr:hover { background-color: #f1f1f1; }
        .summary { margin-top: 20px; text-align: right; font-weight: bold; }
        .footer { text-align: center; margin-top: 20px; padding-top: 10px; border-top: 1px solid #ddd; font-size: 10px; color: #999; }
        .from-account, .to-account { font-family: monospace; font-size: 11px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>SmartBank Transaction Report</h1>
            <p>Report Date: {{ report_date }}</p>
            {% if start_date or end_date %}
            <p>Filtered from {{ start_date }} to {{ end_date }}</p>
            {% endif %}
        </div>
        
        <table class="transactions-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>From Account</th>
                    <th>To Account</th>
                    <th>Type</th>
                    <th>Amount</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                {% for tx in transactions %}
                <tr>
                    <td>{{ tx['_id'] }}</td>
                    <td>{{ tx['timestamp'] }}</td>
                    <td class="from-account">{{ tx['from_account'] }}</td>
                    <td class="to-account">{{ tx['to_account'] }}</td>
                    <td>{{ tx['type'] }}</td>
                    <td>â‚¹{{ "{:.2f}".format(tx['amount']) }}</td>
                    <td>{{ tx['description'] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        
        <div class="footer">
            Generated by SmartBank at {{ current_datetime }}
        </div>
    </div>
</body>
</html>
"""

def generate_transaction_report_pdf(transactions, start_date=None, end_date=None):
    """
    Generates a PDF report of all transactions using pdfkit.

    Args:
        transactions (list): A list of transaction dictionaries.
        start_date (str): The start date for the report.
        end_date (str): The end date for the report.

    Returns:
        bytes: The raw PDF data as bytes.
    """
    # Prepare data for the template
    template_data = {
        'transactions': transactions,
        'report_date': datetime.utcnow().strftime('%Y-%m-%d'),
        'current_datetime': datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S'),
        'start_date': start_date,
        'end_date': end_date
    }
    
    # Render the HTML template
    env = Environment(loader=FileSystemLoader('.'))
    template = env.from_string(HTML_TEMPLATE)
    html_out = template.render(template_data)

    # Use pdfkit to convert the HTML to PDF
    options = {
        'page-size': 'A4',
        'margin-top': '10mm',
        'margin-right': '10mm',
        'margin-bottom': '10mm',
        'margin-left': '10mm',
        'encoding': "UTF-8"
    }

    try:
        pdf_data = pdfkit.from_string(html_out, False, options=options)
        return pdf_data
    except OSError as e:
        print(f"ERROR: pdfkit failed. Make sure wkhtmltopdf is installed and in your system's PATH. Details: {e}")
        raise RuntimeError("PDF generation failed. Is wkhtmltopdf installed?")
